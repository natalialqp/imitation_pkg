# Name of the robot qt, nao, gen3
robot-name: "qt"

# Amount of babbling points (30,100, 150) or your own number
babbling-points: 150

# Iteration id for after babbling
iteration-id: 1

# Quality of the graph d_min in mm (qt and nao: 15, gen3: 50) or your own value
minimum-distance: 15

# Workspace of the robot, the values are in mm, to add a new robot, add the robot name and the values as shown in the following examples
low-edge-qt: [-450, -450, 100]
high-edge-qt: [450, 450, 700]

low-edge-nao: [-300, -350, -200]
high-edge-nao: [300, 350, 400]

low-edge-gen3: [-500, -1200, 100]
high-edge-gen3: [1100, 1200, 1700]

# To create or read an object, you need to specify the object name
obstacle-name: "object_1"

# Squared object/obstacle edges, the values are in mm
low-edge-obstacle: [0, 0, 0]
high-edge-obstacle: [10, 20, 30]

# pre-recorded actions, always add a user id (integer) and a name to the actions (string)
actions-names: ['teacup', 'teapot', 'spoon', 'ladle', 'shallow_plate', 'dinner_plate', 'knife', 'fork', 'salt_shaker', 'sugar_bowl', 'mixer', 'pressure_cooker']
users-id: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]

# Neural network parameters
epochs: 1000

# New action (not in pre-recorded actions)
read-new-action: False
new-action-name: ["new_action_name"]
users-id-new-action: [21]

#read a trajectory (already calculated) for an action from the pre-recorded actions (or new actions) for a specific user
trajectory-id: "5spoon"

#Gaussian Mixtures Regression parameters
#Number of components in the Gaussian Mixture Model
num-components: 5
#Number of components in the Gaussian Mixture Regression
num-clusters: 3
trajectory-name: "spoon"

#NAO parameters for reproducing a trajectory or babble with nao_controller.py
#NAO's IP address
nao-ip: "192.168.0.101"

#Freddy parameters for reproducing a trajectory or babble with freddy_controller.py
#Freddy's IP address
gen3-ip-1: "192.168.1.10"
gen3-ip-2: "192.168.1.12"

#Action desired to reproduce on the robot, QTrobot, NAO or Gen3
action-name: "spoon"

#Desired functions to execute, change the "function-name" to execute the desired one
#"path-planning": To calculate the path planning of the robot arms or limbs. The planning takes place in the workspace of the robot (each joit graph)
#"pose-predicition": Iterates over the actions and the users and predicts the pose of the robot, calculates posible new nodes inside the robot's graph and updates the graph and the path library
#"explore-world": Reads the babbling points explored with the physical robot and calculates the forward kinematics of the robot to update the robot's graph, interpolates nodes in beetween babbling points and updates the stores the joint's graphs
#"create-object": Creates an object/obstacle with the specified edges and stores it on a file
#"object-in-robot-graph": Reads the object/obstacle from a file and stores it on a graph, calculates the overlap between the object and the robot's graph and updates the robot's graph removing the overlapped nodes
#"read-library-paths": Read the existing trajectories from the library and adjust (performs path planning) the trajectory according to the inclusion of a new obstacle/object in the robot's workspace
#"gaussian-mixture-regression": Calculates the GMR of the actions and stores the GMR trajectories in a file ready to be used by the robot

#Functions to execute in the robot
#"reproduce-action": Reproduces the action on the robot, make sure to specify the robot's name and the action name
#"motor-babbling": Babble with the robot, make sure to specify the robot's name and the amount of babbling points

function-name: "explore-world"